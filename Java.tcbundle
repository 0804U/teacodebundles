{
  "description" : "Commonly Used Java Expansions\n\nMade by [twitter] @dustinknopoff",
  "name" : "Java",
  "expanders" : [
    {
      "name" : "Constant Variable",
      "is_enabled" : true,
      "description" : "Creates constant variable.\n> const int size 300",
      "supported_languages" : [
        "java"
      ],
      "pattern" : "const ${type:word} ${name:word} ${value:word}",
      "output_template" : "private static final ${type} ${name.uppercase} = ${value};\n#",
      "identifier" : "const"
    },
    {
      "name" : "If",
      "is_enabled" : true,
      "description" : "Creates if statement.\n> if x > 300",
      "supported_languages" : [
        "java",
        "js"
      ],
      "pattern" : "if ${condition:text?}",
      "output_template" : "if (${condition}) {\n\t#\n}",
      "identifier" : "if"
    },
    {
      "name" : "For",
      "is_enabled" : true,
      "description" : "Creates for loop.\n> for int ArrayList arr",
      "supported_languages" : [
        "java"
      ],
      "pattern" : "for ${type1:word} ${type2:word} ${iterator:word}",
      "output_template" : "for (${type1} i : ${type2} ${iterator}) {\n\t#\n}",
      "identifier" : "for"
    },
    {
      "name" : "For(i)",
      "is_enabled" : true,
      "description" : "Creates iterative for loop.\n> fori <= arr.length()",
      "supported_languages" : [
        "java",
        "js"
      ],
      "pattern" : "fori ${comparator:text?=<} ${max:text?=100}",
      "output_template" : "for (int i = 0; i ${comparator} ${max}; i++) {\n\t#\n}",
      "identifier" : "fori"
    },
    {
      "name" : "Variable",
      "is_enabled" : true,
      "description" : "Default variable declaration. (Private and final)\n> var List<Shape> shapes\n> var int maxHeight",
      "supported_languages" : [
        "java"
      ],
      "pattern" : "var ${type:text} ${name:word}",
      "output_template" : "private final ${type} ${name};\n#",
      "identifier" : "var"
    },
    {
      "name" : "Method",
      "is_enabled" : true,
      "description" : "Creates default method syntax. (Private and final)\n> fn void AnimatorModel\n> fn boolean addShape Shape shape",
      "supported_languages" : [
        "java"
      ],
      "pattern" : "fn ${type:word} ${name:word}| ${args:text?}|",
      "output_template" : "private final ${type} ${name.camelcase}(|${args}|) {\n\t#\n}",
      "identifier" : "fn"
    },
    {
      "name" : "Error",
      "is_enabled" : true,
      "description" : "Creates exception statement.\n> throw u Cannot do this in non-Hybrid View",
      "supported_languages" : [
        "java"
      ],
      "pattern" : "throw ${type:switch(u:UnsupportedOperationException,i:IllegalArgumentException)} ${txt:text}",
      "output_template" : "throw new ${type}(\"${txt}\");\n#",
      "identifier" : "throw"
    },
    {
      "name" : "Cast",
      "is_enabled" : true,
      "description" : "Creates default cast expression.\n> cast Oval o s",
      "supported_languages" : [
        "java"
      ],
      "pattern" : "cast ${type:text} ${new:word} ${var:word}",
      "output_template" : "${type} ${new} = (${type}) ${var};\n#",
      "identifier" : "cast"
    },
    {
      "name" : "Class",
      "is_enabled" : true,
      "description" : "Creates a class with a constructor. Itâ€™s possible to add inheriting classes after `:` character\n\n> +c nombre: Familia",
      "supported_languages" : [
        "java"
      ],
      "pattern" : "|${scope:switch(+:public ,-:private ,#:protected )}|c ${name:word}|: ${inherit:word}|",
      "output_template" : "|${scope}|class ${name.ucfirst}| extends ${inherit.ucfirst}| {\n\t#\n}",
      "identifier" : ""
    },
    {
      "name" : "Interface",
      "is_enabled" : true,
      "description" : "crea una interface Java.\n\n> i Car im base\n> i Car e base",
      "supported_languages" : [
        "java"
      ],
      "pattern" : "i ${name:word}| ${inheritance:switch(im:implements,e:extends)} ${base:word}|",
      "output_template" : "interface ${name.ucfirst}| ${inheritance} ${base.ucfirst}|\n{\n\t#\n}",
      "identifier" : ""
    },
    {
      "name" : "Implements",
      "is_enabled" : true,
      "description" : "crea una interface Java.\n\n> c Car im base\n> c Car e base",
      "supported_languages" : [
        "java"
      ],
      "pattern" : "c ${name:word}| ${inheritance:switch(im:implements,e:extends)} ${base:word}|",
      "output_template" : "class ${name.ucfirst}| ${inheritance} ${base.ucfirst}|\n{\n\t#\n}",
      "identifier" : ""
    },
    {
      "name" : "Function",
      "is_enabled" : true,
      "description" : "Creates a function (method) with the given scope and name.\n\n> +String run\n> +int run(String param1, int param2)",
      "supported_languages" : [
        "java"
      ],
      "pattern" : "|${access:switch(+:public,-:private,#:protected)}${return:word}|${name:word}|(${type:word} ${params:text})|",
      "output_template" : "|${access}${return}|${name}(|${type} ${params}|)\n{\n\t#\n}",
      "identifier" : ""
    },
    {
      "name" : "Scope",
      "is_enabled" : true,
      "description" : "> +\n\n> - \n\n> #",
      "supported_languages" : [
        "java"
      ],
      "pattern" : "${scope:switch(+:public,-:private,#:protected)=-}",
      "output_template" : "${scope}",
      "identifier" : "scope"
    }
  ],
  "supported_languages" : [
    "any"
  ],
  "is_enabled" : true
}