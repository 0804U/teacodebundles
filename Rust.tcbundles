{
    "baseID": "17BC925B-5A09-4D21-A946-1AAEADBDE010",
    "id": "17BC925B-5A09-4D21-A946-1AAEADBDE010",
    "expanders": [
        {
            "baseID": "A88CD49F-D947-4932-9236-C244959ACA6A",
            "id": "A88CD49F-D947-4932-9236-C244959ACA6A",
            "pattern": "fn ${name:word}| ${args:text?}|",
            "identifier": "rfn",
            "output_template": "fn ${name.snakecase}(|${args}|) {\n\t#\n}",
            "supported_languages": [
                "rust"
            ],
            "name": "Fn",
            "is_enabled": true,
            "description": "Creates Rust default function template.\n> fn main\n> fn divide divisor: i32, dividend: i32"
        },
        {
            "baseID": "F86B44C5-855F-408F-BC0A-890FA2AB4F27",
            "id": "F86B44C5-855F-408F-BC0A-890FA2AB4F27",
            "pattern": "impl ${name:word}",
            "identifier": "rimpl",
            "output_template": "impl ${name.capitalize} {\n\t#\n}",
            "supported_languages": [
                "rust"
            ],
            "name": "Impl",
            "is_enabled": true,
            "description": "Default statement for extending a struct.\n> impl rectangle"
        },
        {
            "baseID": "06CEF1E8-EC02-4AD7-BF48-A88E53276F9E",
            "id": "06CEF1E8-EC02-4AD7-BF48-A88E53276F9E",
            "pattern": "struct ${name:word}| ${type:text?}|",
            "identifier": "rstruct",
            "output_template": "struct ${name.capitalize}|<${type}>| {\n\t#\n}",
            "supported_languages": [
                "rust"
            ],
            "name": "Struct",
            "is_enabled": true,
            "description": "> struct Rectangle\n\n> struct Room String"
        },
        {
            "baseID": "DAA6F157-386D-4E39-86DC-0350B6A80E0D",
            "id": "DAA6F157-386D-4E39-86DC-0350B6A80E0D",
            "pattern": "enum ${Name:word}| ${params:text?}|",
            "identifier": "renum",
            "output_template": "enum ${Name.capitalize} {\n\t|${python(\"string = \\\"${params}\\\".split(\\\",\\\")\nstring = ',\\n'.join(string)\nprint string\", autoIndent: true, enableSandbox: true)}|\n\t#\n}",
            "supported_languages": [
                "rust"
            ],
            "name": "Enum",
            "is_enabled": true,
            "description": "> enum Coins\n\n> enum Coins Penny,Nickel,Quarter,Dime"
        },
        {
            "baseID": "0BD29A62-AFF4-4359-A7E3-FD363121720A",
            "id": "0BD29A62-AFF4-4359-A7E3-FD363121720A",
            "pattern": "var ${name:word} ${value:word}| ${type:enum(i8,i16,i32,i64,isize,u8,u16,u32,u64,usize,f32,f64,char,bool,())} ${mut:switch(m:mut)=m}|",
            "identifier": "rvar",
            "output_template": "let |${mut}| ${name.camelcase}|: ${type}| = ${value};",
            "supported_languages": [
                "rust"
            ],
            "name": "Variables",
            "is_enabled": true,
            "description": "> var integer 36\n\n> var integer 36 usize m"
        },
        {
            "baseID": "6E5BEB4E-2213-4ED5-97CD-95F4A9D41E97",
            "id": "6E5BEB4E-2213-4ED5-97CD-95F4A9D41E97",
            "pattern": "conv ${var:word} ${type:word}",
            "identifier": "rconv",
            "output_template": "${var} as ${type}#",
            "supported_languages": [
                "rust"
            ],
            "name": "Type Conversion",
            "is_enabled": true,
            "description": "> conv integer f32"
        },
        {
            "baseID": "1E82D7DE-D103-4581-8FB3-9AE087B6E11A",
            "id": "1E82D7DE-D103-4581-8FB3-9AE087B6E11A",
            "pattern": "main",
            "identifier": "rmain",
            "output_template": "fn main() {\n\t#\n}",
            "supported_languages": [
                "rust"
            ],
            "name": "main",
            "is_enabled": true,
            "description": "> main"
        },
        {
            "baseID": "E9CA8616-8829-4F97-B74B-DE0C4DB69085",
            "id": "E9CA8616-8829-4F97-B74B-DE0C4DB69085",
            "pattern": "match ${var:word}| ${options:text?}|",
            "identifier": "rmatch",
            "output_template": "match ${var} {\n\t|${python(\"string = \\\"${options}\\\".split(\\\",\\\")\nfor i in range(0, len(string)):\n  string[i] = \\\"\\t\\\"+ string[i] +\\\"=> ,\\\"\nprint('\\n'.join(string))\", autoIndent: true, enableSandbox: true)}|\n}",
            "supported_languages": [
                "rust"
            ],
            "name": "Match",
            "is_enabled": true,
            "description": "> match number\n\n> match number 3,7,22"
        }
    ],
    "supported_languages": [
        "any",
        "rust"
    ],
    "name": "Rust",
    "is_enabled": true,
    "description": "Common Rust Expansions\n\nMade by [@dustinknopoff](https://dustinknopoff.me)\n\n"
}