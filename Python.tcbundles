{
    "baseID": "D2BEEF4B-C9FA-48E1-B2D2-0D1EF8096028",
    "id": "D2BEEF4B-C9FA-48E1-B2D2-0D1EF8096028",
    "expanders": [
        {
            "baseID": "7741C787-8E9E-45E3-91F7-ECF9DCF9D24D",
            "id": "7741C787-8E9E-45E3-91F7-ECF9DCF9D24D",
            "pattern": "fn ${name:word}| ${params:text?}|",
            "identifier": "py.fn",
            "output_template": "def ${name.snakecase}(|${python(\"print(\\\"${params.snakecase}\\\".replace(\\\",\\\", \\\", \\\"))\")}|):\n\t#",
            "supported_languages": [
                "python"
            ],
            "name": "Function",
            "is_enabled": true,
            "description": "Creates default function statement.\n> fn do arr,index\n\n\n> fn do"
        },
        {
            "baseID": "5C7C5F07-EEE3-47A2-89C7-31994134C3CD",
            "id": "5C7C5F07-EEE3-47A2-89C7-31994134C3CD",
            "pattern": "req ${url:text?}| ${out:switch(c:content,j:json())}|",
            "identifier": "py.req",
            "output_template": "r = requests.get(\"${url}\")|.${out}|\n#",
            "supported_languages": [
                "python"
            ],
            "name": "Request",
            "is_enabled": true,
            "description": "Creates the default requests statement.\n> req https://www.apple.com j\n> req https://www.apple.com"
        },
        {
            "baseID": "DFA12555-C863-46B5-A723-D7B076FD8E66",
            "id": "DFA12555-C863-46B5-A723-D7B076FD8E66",
            "pattern": "re ${pattern:text=\\w+} ${txt:word}",
            "identifier": "py.re",
            "output_template": "re.findall(r'${pattern}', ${txt})",
            "supported_languages": [
                "python"
            ],
            "name": "Regex",
            "is_enabled": true,
            "description": "Default regex implementation:\n> re \\d+ str\n\n**NOTE: Must import `re`**"
        },
        {
            "baseID": "746C9DBC-738E-4C86-A861-D85FEE69F78A",
            "id": "746C9DBC-738E-4C86-A861-D85FEE69F78A",
            "pattern": "bs4 ${content:text?=r}",
            "identifier": "py.bs4",
            "output_template": "soup = BeautifulSoup(${content}, 'html.parser')\n#",
            "supported_languages": [
                "python"
            ],
            "name": "Beautiful Soup",
            "is_enabled": true,
            "description": "Creates default Beautiful Soup statement\n> bs4 r.content\n\n**NOTE: Must import `bs4`**"
        },
        {
            "baseID": "37261157-F800-48A1-B0A2-C1D23F765A26",
            "id": "37261157-F800-48A1-B0A2-C1D23F765A26",
            "pattern": "class ${type:enum(n,d)=n} ${name:word}| ${vars:text?}|",
            "identifier": "py.class",
            "output_template": "${python(\"if \\\"${type}\\\" is \\\"d\\\":\n\tprint(\\\"@dataclass\\\")\n\tprint(\\\"class ${name.capitalize}:\\\")\n\t|vars = \\\"${vars.camelcase}\\\"\n\tfor arg in vars.split(\\\",\\\"):\n  \t\tprint(\\\"   \\\" + arg.replace(\\\":\\\", \\\": \\\"))|\nelse:\n\tprint(\\\"class ${name.capitalize}:\\\")\n\t|vars = \\\"${vars.camelcase}\\\"\n\tprint(\\\"    def __init__(${vars.camelcase}):\\\")\n\tfor arg in vars.split(\\\",\\\"):\n  \t\tprint(\\\"        self.{} = {}\\\".format(arg,arg))|\")}\n#",
            "supported_languages": [
                "python"
            ],
            "name": "Class",
            "is_enabled": true,
            "description": "Creates a default class.\n> class n Story\n\n> class n Story title,details\n\n> class d Story\n\n> class d Story title:str,details:List[str]\n\n**NOTE: 'd' requires Python 3.7 and importing `dataclass`**\n"
        },
        {
            "baseID": "1FA23E9A-CB14-4186-B9A9-C4350C49F073",
            "id": "1FA23E9A-CB14-4186-B9A9-C4350C49F073",
            "pattern": "ifany ${list:text?}",
            "identifier": "py.ifany",
            "output_template": "if any(w for w in ${list}):\n\t#",
            "supported_languages": [
                "python"
            ],
            "name": "In Tuple",
            "is_enabled": true,
            "description": "Creates an if any statement:\n> ifany (\"Apple\", \"Banana\", \"Croissant\")"
        },
        {
            "baseID": "000B2DC8-6E4C-41F5-84DA-E9FEDA59827D",
            "id": "000B2DC8-6E4C-41F5-84DA-E9FEDA59827D",
            "pattern": "open ${path:text}",
            "identifier": "py.open",
            "output_template": "with open('${path}') as f:\n\t#",
            "supported_languages": [
                "python"
            ],
            "name": "Open",
            "is_enabled": true,
            "description": "Creates default open statement.\n> open ~/Downloads/example.txt"
        },
        {
            "baseID": "CF066DE9-675D-4050-BC62-C272B7B9A8B2",
            "id": "CF066DE9-675D-4050-BC62-C272B7B9A8B2",
            "pattern": "sh ${run:text?}",
            "identifier": "py.sh",
            "output_template": "script = subprocess.run(\"${run}\".split(), stdout=subprocess.PIPE)\n#",
            "supported_languages": [
                "python"
            ],
            "name": "Shell in Python",
            "is_enabled": true,
            "description": "Creates default statement for shell scripts running in python.\n> sh brew list\n\n> sh basename 'git rev-parse --show-toplevel'"
        },
        {
            "baseID": "9B4E652B-2653-43B7-85C8-C313BA995968",
            "id": "9B4E652B-2653-43B7-85C8-C313BA995968",
            "pattern": "main| ${foo:text?}|",
            "identifier": "py.main",
            "output_template": "if __name__ == \"__main__\":\n\t|${foo}|#",
            "supported_languages": [
                "python"
            ],
            "name": "Main",
            "is_enabled": true,
            "description": "> main\n\n> main Story().read()"
        },
        {
            "baseID": "A5F28216-C032-46EA-BAAB-DAD851990917",
            "id": "A5F28216-C032-46EA-BAAB-DAD851990917",
            "pattern": "[i] ${name:word}",
            "identifier": "py.listconv",
            "output_template": "${name} = list(map(int, ${name}))",
            "supported_languages": [
                "python"
            ],
            "name": "List Strings -> List Ints",
            "is_enabled": true,
            "description": "Convert a list of strings into a list of integers\n> [i] results"
        },
        {
            "baseID": "5488C00A-A290-4F8F-B45A-A73D66D0B1B4",
            "id": "5488C00A-A290-4F8F-B45A-A73D66D0B1B4",
            "pattern": "gl ${version:number=3.6}",
            "identifier": "py.gl",
            "output_template": "\\#!/usr/bin/env python${version}\n#",
            "supported_languages": [
                "python"
            ],
            "name": "Global",
            "is_enabled": true,
            "description": "Creates the Shebang for global python usage\n> gl 3.6"
        },
        {
            "baseID": "CBFAAA8E-5B60-4597-A136-AEEED8686788",
            "id": "CBFAAA8E-5B60-4597-A136-AEEED8686788",
            "pattern": "@${package:text?}| ${from:text?}|",
            "identifier": "py.import",
            "output_template": "|from ${from} |import ${package}",
            "supported_languages": [
                "python"
            ],
            "name": "import",
            "is_enabled": true,
            "description": "> @re\n\n> @BeautifulSoup bs4\n\n> @Dict,List typings"
        },
        {
            "baseID": "DB03F40C-90E3-41EA-9A94-05C1B6A3758B",
            "id": "DB03F40C-90E3-41EA-9A94-05C1B6A3758B",
            "pattern": "-l ${var:word} ${expr:text?}",
            "identifier": "py.lambda",
            "output_template": "lambda ${var}: ${expr}",
            "supported_languages": [
                "python"
            ],
            "name": "Lambda",
            "is_enabled": true,
            "description": "> -l x x*x"
        },
        {
            "baseID": "C8915A90-9A0B-40C9-B573-5A175621ADD5",
            "id": "C8915A90-9A0B-40C9-B573-5A175621ADD5",
            "pattern": "slice ${se:switch(s:start,e:end)} ${ba:switch(b:before,a:after)} ${name:word} ${slice:word}",
            "identifier": "py.slice",
            "output_template": "${python(\"if \\\"${se}\\\" is \\\"start\\\":\n\tif \\\"${ba}\\\" is \\\"before\\\":\n\t\tprint(\\\"${name}[:${slice}]\\\")\n\telse:\n\t\tprint(\\\"${name}[${slice}:]\\\")\nelse:\n\tif \\\"${ba}\\\" is \\\"before\\\":\n\t\tprint(\\\"${name}[:-${slice}]\\\")\n\telse:\n\t\tprint(\\\"${name}[-${slice}:]\\\")\")}",
            "supported_languages": [
                "python"
            ],
            "name": "String Slice",
            "is_enabled": true,
            "description": "Can't remember where the `-` goes?\nIf the number goes before or after the `:`? \nHave TeaCode do it for you!\n\n> slice s b lines 3\n\n> slice e a lines 3\n\nAsk yourself these questions:\n* Am I intending to slice this string from the start of end? \nUse *s* for at the *start*, and *e* for at the *end*.\n\n* Am I intending to get everything before or after that index? \nUse *b* for from *before*, and *a* for from *after*.\n"
        },
        {
            "baseID": "22FEED68-A6A4-4D18-9546-E58B07E9CA95",
            "id": "22FEED68-A6A4-4D18-9546-E58B07E9CA95",
            "pattern": "join ${var:word} ${delim:text?}",
            "identifier": "py.join",
            "output_template": "'${delim}'.join(${var})",
            "supported_languages": [
                "python"
            ],
            "name": "Join",
            "is_enabled": true,
            "description": "Join a list into a string\n> join lines , "
        },
        {
            "baseID": "08462808-3C31-424B-9D7D-0D244450F235",
            "id": "08462808-3C31-424B-9D7D-0D244450F235",
            "pattern": "rep ${from:text?} ${to:text?}",
            "identifier": "py.rep",
            "output_template": ".replace(\"${from}\",\"${to}\")",
            "supported_languages": [
                "python"
            ],
            "name": "Replace",
            "is_enabled": true,
            "description": "String replace method\n> rep \\j j\n\n> rep > <"
        },
        {
            "baseID": "B1DAB04E-A98C-4ECE-A2FD-3721DC700E3B",
            "id": "B1DAB04E-A98C-4ECE-A2FD-3721DC700E3B",
            "pattern": "test",
            "identifier": "py.test",
            "output_template": "\\# filename: ${#filename}\n\\# code: ${#code}\n\\# expanding line: ${#expandingLine}\n\\# pboard: ${#pboard}\n\n${python(\"print \\\"Go team!\\\"\", autoIndent: true, enableSandbox: true)}",
            "supported_languages": [
                "python"
            ],
            "name": "Test",
            "is_enabled": false,
            "description": "> test"
        }
    ],
    "supported_languages": [
        "any",
        "python"
    ],
    "name": "Python",
    "is_enabled": true,
    "description": "Commonly Used Python Expansions\n\nMade by [@dustinknopoff](https://dustinknopoff.me)"
}